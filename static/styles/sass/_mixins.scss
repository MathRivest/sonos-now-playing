// Choose mobile first or desktop first (get rid of the other one)
// http://thesassway.com/intermediate/responsive-web-design-in-sass-using-media-queries-in-sass-32/
$layout-size: 				980px; // Size at which the design should fit on desktop
$break-large-phone: 		480px;
$break-small-tablet: 		600px;
$break-tablet: 				768px;
$break-wide: 				1200px;
$break-tall-screen: 		780px;

// Mobile first
@mixin breakpoint($media, $ie:false) {
	@if $media == large-phone {
		@media only screen and (min-width: $break-large-phone) { @content; }
	}
	@else if $media == small-tablet {
		@media only screen and (min-width: $break-small-tablet) { @content; }
	}
	@else if $media == tablet {
		@media only screen and (min-width: $break-tablet) { @content; }
	}
	@else if $media == desktop {
		@media only screen and (min-width: $layout-size) { @content; }
	}
	@else if $media == widescreen {
		@media only screen and (min-width: $break-wide) { @content; }
	}
	@else if $media == tall-screen {
		@media only screen and (min-height: $break-tall-screen) { @content; }
	}

	// If IE argument is passed in, apply the styles to pages with class .lt-ie9
	@if $ie == ie {
		.lt-ie9 & {
			@content;
		}
	}
}

// Desktop first
@mixin breakpoint-d($media) {
	@if $media == phone {
		@media only screen and (max-width: $break-large-phone - 1) { @content; }
	}
	@if $media == large-phone {
		@media only screen and (max-width: $break-small-tablet - 1) { @content; }
	}
	@else if $media == small-tablet {
		@media only screen and (max-width: $break-tablet - 1) { @content; }
	}
	@else if $media == tablet {
		@media only screen and (min-width: $break-tablet) and (max-width: $layout-size - 1) { @content; }
	}
	@else if $media == widescreen {
		@media only screen and (min-width: $break-wide) { @content; }
	}
	@else if $media == tall-screen {
		@media only screen and (min-height: $break-tall-screen) { @content; }
	}
}




// Convert pixels to rem
// eg. for a relational value of 12px write rem(12px) when the base font value of the document is 16px
// We could start using this as it's supported in nearly every browser, with the exception of IE8.
// It will just end up using the pixel size you initially inserted.
// Credit: http://zerosixthree.se/8-sass-mixins-you-must-have-in-your-toolbox/
@function calculateRem($size) {
	$remSize: $size / 16px;
	@return $remSize * 1rem;
}
@mixin rem($size) {
	font-size: $size;
	font-size: calculateRem($size);
}

// Credit: https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/addons/_hide-text.scss
@mixin hide-text {
	background-color: transparent;
	border:           0;
	color:            transparent;
	font:             0/0 a;
	text-shadow:      none;
}

// Credit: http://37signals.com/svn/posts/3271-easy-retina-ready-images-using-scss
@mixin image-2x($image, $width, $height) {
	@media (min--moz-device-pixel-ratio: 1.3),
	(-o-min-device-pixel-ratio: 2.6/2),
	(-webkit-min-device-pixel-ratio: 1.3),
	(min-device-pixel-ratio: 1.3),
	(min-resolution: 1.3dppx) {
		/* on retina, use image that's scaled by 2 */
		background-image: url($image);
		background-size: $width $height;
	}
}


// The general purpose retina sprite mixin.
//
//    @include retina-sprite(name, $spritemap1, $spritemap2)
//    @include retina-sprite(name, $spritemap1, $spritemap2[, $dimensions: true, $pad: 0])
//
//    If `dimensions` is true, then width/height will also be set.
//
//    if `pad` is non-zero, then that's how much padding the element will have (requires
//    $spacing on the sprite maps). Great for iPhone interfaces to make hit areas bigger.
//
@mixin retina-sprite($name, $hover: false, $active: false) {
	@include _retina-sprite($name, $sprites, $sprites2x, $hover, $active);
}

@mixin _retina-sprite($name, $sprites, $sprites2x, $hover, $active, $dimensions: true, $pad: 0) {
	@if $dimensions == true {
		@include sprite-dimensions($sprites, $name);
	}
	background-image: sprite-url($sprites);
	background-position: sprite-position($sprites, $name, -$pad, -$pad);
	background-repeat: no-repeat;

	@if $hover == true {
		$name_hover: $name + _hover;
		&:hover {
			background-position: sprite-position($sprites, $name_hover, -$pad, -$pad);
		}
	}
	@if $active == true {
		$name_active: $name + _active;
		&:active {
			background-position: sprite-position($sprites, $name_active, -$pad, -$pad);
		}
	}

	@if $pad > 0 {
		padding: $pad;
	}

	@media (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5), (min-resolution: 144dpi) {
		& {
			$pos: sprite-position($sprites2x, $name, -$pad * 2, -$pad * 2);
			background-image: sprite-url($sprites2x);
			background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
			@include background-size(ceil(image-width(sprite-path($sprites2x)) / 2) auto);
			// sprite-path() returns the path of the generated sprite sheet, which
			// image-width() calculates the width of. the ceil() is in place in case
			// you have sprites that have an odd-number of pixels in width

			@if $hover == true {
				$name_hover: $name + _hover; // create myButton_hover and assign it
				&:hover{
					$pos: sprite-position($sprites2x, $name_hover, -$pad * 2, -$pad * 2);
					background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
				}
			}
			@if $active == true {
				$name_active: $name + _active; // create myButton_active and assign it
				&:active{
					$pos: sprite-position($sprites2x, $name_active, -$pad * 2, -$pad * 2);
					background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
				}
			}
		}
	}
}
